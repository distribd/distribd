name: CI

on:
  push:
    branches:
    - main
  pull_request: ~

jobs:
  rust:
    name: rust
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Stable with rustfmt and clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      - name: Handle Rust dependencies caching
        uses: Swatinem/rust-cache@v1

      - uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Annotate commit with clippy warnings
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

      - name: Security audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  lint:
    name: lint
    runs-on: ubuntu-latest

    steps:
    - name: Check out code from GitHub
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: 3.9

    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Set up cache
      uses: actions/cache@v2
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/pyproject.toml') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: ./.venv/bin/python -m pip --version >/dev/null 2>&1 || rm -rf .venv

    - name: Setup venv
      id: setup-venv
      run: python -m venv .venv

    - name: Install dependencies
      shell: bash
      run: ./.venv/bin/python -m pip install -r requirements.txt

    - name: Run isort
      shell: bash
      run: ./.venv/bin/python -m isort -c --diff distribd tests

    - name: Run black
      shell: bash
      run: ./.venv/bin/python -m black --check --diff distribd tests

    - name: Run flake8
      shell: bash
      run: ./.venv/bin/python -m flake8 distribd tests

  tests:
    name: pytest/${{ matrix.os }}/${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest

    strategy:
      matrix:
        os: [Ubuntu, MacOS]
        python-version: ["3.9", "3.10"]

    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}

    steps:
    - name: Check out code from GitHub
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Set up cache
      uses: actions/cache@v2
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/pyproject.toml') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: ./.venv/bin/python -m pip --version >/dev/null 2>&1 || rm -rf .venv

    - name: Setup venv
      id: setup-venv
      run: python -m venv .venv && ./venv/bin/python -m pip install --upgrade pip setuptools wheel

    - name: Install dependencies
      shell: bash
      run: ./.venv/bin/python -m pip install -e .[tests]

    - name: Run pytest
      shell: bash
      run: ./.venv/bin/python -m pytest --cov=. --cov-report=xml

    - name: Upload coverage to Codecov
      shell: bash
      run: ./.venv/bin/codecov --flags unittests -e OS -e PYTHON --tries 20

  integration:
    name: integration
    runs-on: ubuntu-latest

    steps:
    - name: Check out code from GitHub
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: 3.9

    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Set up cache
      uses: actions/cache@v2
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/pyproject.toml') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: ./.venv/bin/python -m pip --version >/dev/null 2>&1 || rm -rf .venv

    - name: Setup venv
      id: setup-venv
      run: python -m venv .venv

    - name: Install dependencies
      shell: bash
      run: ./.venv/bin/python -m pip install pytest pytest-docker-tools httpx

    - name: Run integration tests
      shell: bash
      run: ./.venv/bin/python -m pytest integration
